from functools import partial
import sys

import sys

from PyQt6.QtCore import Qt
from PyQt6.QtWidgets import(QApplication, QGridLayout, QLineEdit, QMainWindow, QPushButton, QVBoxLayout, QWidget)


#                                  main window (GUI)
class Calculator(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Basic Calculator")
        self.setFixedSize(335, 335) #Window Size
        self.generalLayout = QVBoxLayout()
        centralWidget = QWidget(self)
        centralWidget.setLayout(self.generalLayout)
        self.setCentralWidget(centralWidget)
        self.createdisplay()
        self.createbuttons()

    def createdisplay(self):
        self.display = QLineEdit()
        self.display.setFixedHeight(50) 
        self.display.setAlignment(Qt.AlignmentFlag.AlignRight)
        self.display.setReadOnly(True)
        self.generalLayout.addWidget(self.display)

    def createbuttons(self):
        self.buttonmap = {}
        buttonslayout = QGridLayout()
        keyboard = [
            ["7", "8", "9", "/", "C"],
            ["4", "5", "6", "*", "("],
            ["1", "2", "3", "-", ")"],
            ["0", "00", ".", "+", "="],
        ]

        for row, keys in enumerate(keyboard):
            for col, key in enumerate(keys):
                self.buttonmap[key] = QPushButton(key)
                self.buttonmap[key].setFixedSize(55, 55)
                buttonslayout.addWidget(self.buttonmap[key], row, col)

        self.generalLayout.addLayout(buttonslayout)

    def setdisplaytext(self, text):
        self.display.setText(text)
        self.display.setFocus()

    def displaytext(self):
        return self.display.text()

    def cleardisplay(self):
        self.setdisplaytext("")


def evaluateexpression(expression):
    try:
        result = str(eval(expression, {}, {}))
    except Exception:
        result = "ERROR"
    return result

class controller:
    def __init__(self, model, view):
        self._evaluate = model
        self._view = view
        self.connectsignalsandslots()

    def calculateresult(self):
        result = self._evaluate(expression=self._view.displaytext())
        self._view.setdisplaytext(result)

    def buildexpression(self, subExpression):
        if self._view.displaytext() == "ERROR":
            self._view.cleardisplay()
        expression = self._view.displaytext() + subExpression
        self._view.setdisplaytext(expression)

    def connectsignalsandslots(self):
        for keySymbol, button in self._view.buttonmap.items():
            if keySymbol not in {"=", "C"}:
                button.clicked.connect(
                    partial(self.buildexpression, keySymbol))                
            self._view.buttonmap["="].clicked.connect(self.calculateresult)
            self._view.display.returnPressed.connect(self.calculateresult)
            self._view.buttonmap["C"].clicked.connect(self._view.cleardisplay)


#                                    main function
def main():
    calcApp = QApplication([])
    calcWindow = Calculator()
    calcWindow.show()
    controller(model=evaluateexpression, view=calcWindow)
    sys.exit(calcApp.exec())

if __name__ == "__main__":
    main()

   


